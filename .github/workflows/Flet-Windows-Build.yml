name: Flet Windows Build with Installer

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test'
        required: true
        default: 'v0.1.0-test'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64

      # Ê∏ÖÁêÜÂèØËÉΩÁöÑ Flutter ÁºìÂ≠òÂÜ≤Á™Å
      - name: Clean Flutter environment
        shell: powershell
        run: |
          Write-Output "=== Cleaning potential Flutter conflicts ==="
          # Ê∏ÖÁêÜÂèØËÉΩÂ≠òÂú®ÁöÑ Flutter ÁºìÂ≠ò
          if (Test-Path "$env:USERPROFILE\flutter") {
            Write-Output "Removing existing Flutter directory..."
            Remove-Item -Recurse -Force "$env:USERPROFILE\flutter" -ErrorAction SilentlyContinue
          }
          if (Test-Path "$env:LOCALAPPDATA\Pub\Cache") {
            Write-Output "Removing Flutter Pub cache..."
            Remove-Item -Recurse -Force "$env:LOCALAPPDATA\Pub\Cache" -ErrorAction SilentlyContinue
          }
          # Ê∏ÖÁêÜ PATH ‰∏≠ÁöÑ Flutter Ë∑ØÂæÑ
          $originalPath = $env:PATH
          $env:PATH = ($env:PATH -split ';' | Where-Object { $_ -notlike '*flutter*' }) -join ';'
          Write-Output "Cleaned PATH from Flutter references"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync
          uv add flet

      - name: Build with flet
        env:
          # Á°Æ‰øù Flet ‰ΩøÁî®Ëá™Â∑±ÁöÑ Flutter
          FLUTTER_ROOT: ""
          PUB_CACHE: ""
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.test_version }}"
          } else {
            $VERSION = "${{ github.ref_name }}"
          }
          
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"

          $versionClean = $VERSION -replace '^v', ''
          
          Write-Output "=== Starting Flet Build ==="
          Write-Output "Build version: $versionClean"
          
          # Ê∑ªÂä†ËØ¶ÁªÜËæìÂá∫Êù•Ë∞ÉËØïÈóÆÈ¢ò
          uv run flet build windows --build-version $versionClean --verbose

      # ÂÆâË£Ö Inno Setup
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: powershell

      # ÂàõÂª∫ Inno Setup ËÑöÊú¨
      - name: Create Inno Setup script
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $versionClean = $version -replace '^v', ''
          
          $innoScript = @"
          [Setup]
          AppName=SwissKit
          AppVersion=$versionClean
          AppPublisher=Summer Group
          AppPublisherURL=https://github.com/${{ github.repository }}
          AppSupportURL=https://github.com/${{ github.repository }}/issues
          AppUpdatesURL=https://github.com/${{ github.repository }}/releases
          DefaultDirName={autopf}\SwissKit
          DefaultGroupName=SwissKit
          UninstallDisplayName=SwissKit
          Compression=lzma2
          SolidCompression=yes
          OutputDir=installer
          OutputBaseFilename=SwissKit-Setup-$versionClean
          WizardStyle=modern
          PrivilegesRequired=admin
          PrivilegesRequiredOverridesAllowed=commandline dialog
          ArchitecturesAllowed=x64compatible
          ArchitecturesInstallIn64BitMode=x64compatible
          DisableDirPage=no
          DisableProgramGroupPage=no
          ExtraDiskSpaceRequired=104857600
          AllowCancelDuringInstall=yes
          AppId={{A1B2C3D4-E5F6-7890-ABCD-EF1234567890}
          VersionInfoVersion=$versionClean
          VersionInfoDescription=SwissKit Application
          UninstallDisplayIcon={app}\SwissKit.exe
          SetupMutex=SwissKitSetupMutex
          AppMutex=SwissKitAppMutex
          
          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"
          
          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
          Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 6.1; Check: not IsAdminInstallMode
          
          [Files]
          Source: "build\windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          
          [Icons]
          Name: "{group}\SwissKit"; Filename: "{app}\SwissKit.exe"
          Name: "{group}\{cm:UninstallProgram,SwissKit}"; Filename: "{uninstallexe}"
          Name: "{autodesktop}\SwissKit"; Filename: "{app}\SwissKit.exe"; Tasks: desktopicon
          Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\SwissKit"; Filename: "{app}\SwissKit.exe"; Tasks: quicklaunchicon
          
          [Run]
          Filename: "{app}\SwissKit.exe"; Description: "{cm:LaunchProgram,SwissKit}"; Flags: nowait postinstall skipifsilent
          
          [UninstallDelete]
          Type: filesandordirs; Name: "{app}"
          
          [Code]
          function IsUpgrade(): Boolean;
          var
            PrevVersion: String;
          begin
            PrevVersion := GetPreviousData('Version', '');
            Result := (PrevVersion <> '');
          end;
          
          function ShouldSkipPage(PageID: Integer): Boolean;
          begin
            Result := False;
            if IsUpgrade() then
            begin
              case PageID of
                wpSelectDir: Result := True;
                wpSelectProgramGroup: Result := True;
              end;
            end;
          end;
          
          function InitializeSetup(): Boolean;
          var
            PrevVersion: String;
            CurVersion: String;
          begin
            Result := True;
            PrevVersion := GetPreviousData('Version', '');
            CurVersion := '$versionClean';
          
            if PrevVersion <> '' then
            begin
              if MsgBox('SwissKit version ' + PrevVersion + ' is already installed. ' +
                        'Do you want to upgrade to version ' + CurVersion + '?', 
                        mbConfirmation, MB_YESNO) = IDNO then
              begin
                Result := False;
              end;
            end;
          end;
          
          procedure RegisterPreviousData(PreviousDataKey: Integer);
          begin
            SetPreviousData(PreviousDataKey, 'Version', '$versionClean');
          end;
          "@
          
          New-Item -ItemType Directory -Path "installer" -Force
          $innoScript | Out-File -FilePath "swisskit.iss" -Encoding UTF8

      # ÊûÑÂª∫ÂÆâË£ÖÂåÖ
      - name: Build installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "swisskit.iss"
        shell: powershell

      # ÊâìÂåÖÊûÑÂª∫‰∫ßÁâ©
      - name: Package builds
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $artifactName = "swisskit-windows-x64-$version"
          
          # ÂàõÂª∫ZIPÂåÖ
          New-Item -ItemType Directory -Path "release\$artifactName" -Force
          Copy-Item -Path "build\windows\*" -Destination "release\$artifactName" -Recurse
          Compress-Archive -Path "release\$artifactName" -DestinationPath "build\$artifactName.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            build/*.zip
            installer/*.exe

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.test_version || github.ref_name }}
          name: SwissKit Release ${{ github.event.inputs.test_version || github.ref_name }}
          files: |
            artifacts/**/*
          body: |
            ## Windows Version Downloads
            
            ### üöÄ Recommended (Installer)
            - **SwissKit-Setup-[version].exe** - Windows Installer
              - Automatically installs to system
              - Creates desktop and start menu shortcuts
              - Supports one-click uninstall
              - Best for regular use
            
            ### üì¶ Portable Version (ZIP)
            - **swisskit-windows-x64-[version].zip** - Portable version
              - Extract and run
              - No system modifications
              - Best for testing or temporary use
            
            ### Installation Instructions
            
            **Installer Version:**
            1. Download the `.exe` installer file
            2. Double-click to run the installer
            3. Follow the setup wizard
            4. Launch from desktop or start menu
            
            **Portable Version:**
            1. Download and extract the ZIP file
            2. Run `SwissKit.exe` from the extracted folder
            
            > **System Requirements:** Windows 10/11 (x64)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
