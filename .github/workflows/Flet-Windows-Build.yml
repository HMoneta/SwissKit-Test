name: Flet Windows Build - Working Fix

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test'
        required: true
        default: 'v0.1.0-test'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      # 方案1: 临时降级 Flet 版本
      - name: Create temporary compatible pyproject.toml
        shell: powershell
        run: |
          Write-Output "=== Creating compatible configuration ==="
          
          # 备份原始文件
          Copy-Item "pyproject.toml" "pyproject.toml.backup"
          
          # 读取并修改 pyproject.toml
          $content = Get-Content "pyproject.toml" -Raw -Encoding UTF8
          
          # 替换 Flet 版本为兼容版本
          $content = $content -replace 'flet==0\.28\.2', 'flet==0.27.0'
          $content = $content -replace 'flet\[all\]==0\.28\.2', 'flet[all]==0.27.0'
          
          # 写回文件
          $content | Set-Content "pyproject.toml" -Encoding UTF8 -NoNewline
          
          Write-Output "Modified pyproject.toml to use Flet 0.27.0"
          Write-Output "Original file backed up as pyproject.toml.backup"

      - name: Clean environment
        shell: powershell
        run: |
          Write-Output "=== Cleaning environment ==="
          
          # 清理可能的缓存
          $foldersToClean = @(
            "$env:LOCALAPPDATA\Pub\Cache",
            "$env:USERPROFILE\.flutter",
            "$env:TEMP\flet*",
            "build",
            ".venv"
          )
          
          foreach ($folder in $foldersToClean) {
            if (Test-Path $folder) {
              Write-Output "Removing: $folder"
              Remove-Item -Recurse -Force $folder -ErrorAction SilentlyContinue
            }
          }

      - name: Install dependencies
        shell: powershell
        run: |
          Write-Output "=== Installing dependencies ==="
          
          # 设置环境变量
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          
          # 安装依赖
          uv sync --all-extras
          
          # 验证安装
          uv run python -c "import flet; print(f'Flet version: {flet.__version__}')"

      - name: Build application
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.test_version }}"
          } else {
            $VERSION = "${{ github.ref_name }}"
          }
          
          Write-Output "=== Building application ==="
          Write-Output "Version: $VERSION"
          
          # 设置环境变量
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          $env:FLUTTER_VERBOSE = "true"
          
          try {
            # 使用兼容版本构建
            uv run flet build windows `
              --build-version $VERSION `
              --build-number 1 `
              --verbose `
              --no-rich-output `
              2>&1 | Tee-Object -FilePath "build.log"
            
            Write-Output "Build completed successfully"
          }
          catch {
            Write-Output "=== Build failed, showing logs ==="
            if (Test-Path "build.log") {
              Get-Content "build.log" -Tail 50 | Write-Output
            }
            throw "Build failed: $_"
          }

      # 验证构建结果
      - name: Verify build output
        shell: powershell
        run: |
          Write-Output "=== Verifying build output ==="
          
          if (-not (Test-Path "build\windows")) {
            Write-Output "Build directory contents:"
            Get-ChildItem "build" -Recurse -ErrorAction SilentlyContinue | Write-Output
            throw "Windows build directory not found"
          }
          
          $exePath = "build\windows\SwissKit.exe"
          if (-not (Test-Path $exePath)) {
            Write-Output "Contents of build\windows:"
            Get-ChildItem "build\windows" -Recurse | Write-Output
            throw "SwissKit.exe not found"
          }
          
          # 检查文件大小
          $fileInfo = Get-ItemProperty $exePath
          Write-Output "SwissKit.exe size: $($fileInfo.Length) bytes"
          
          if ($fileInfo.Length -lt 10MB) {
            Write-Output "Warning: Executable seems too small, but continuing..."
          }
          
          Write-Output "Build verification successful"

      # 恢复原始配置
      - name: Restore original pyproject.toml
        if: always()
        shell: powershell
        run: |
          if (Test-Path "pyproject.toml.backup") {
            Move-Item "pyproject.toml.backup" "pyproject.toml" -Force
            Write-Output "Restored original pyproject.toml"
          }

      # 安装 Inno Setup
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: powershell

      # 创建安装包
      - name: Create installer
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $versionClean = $version -replace '^v', ''
          
          Write-Output "Creating installer for version: $versionClean"
          
          $innoScript = @"
          [Setup]
          AppName=SwissKit
          AppVersion=$versionClean
          AppPublisher=Summer Group
          AppPublisherURL=https://github.com/${{ github.repository }}
          DefaultDirName={autopf}\SwissKit
          DefaultGroupName=SwissKit
          UninstallDisplayName=SwissKit
          Compression=lzma2
          SolidCompression=yes
          OutputDir=installer
          OutputBaseFilename=SwissKit-Setup-$versionClean
          WizardStyle=modern
          PrivilegesRequired=admin
          ArchitecturesAllowed=x64compatible
          ArchitecturesInstallIn64BitMode=x64compatible
          
          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"
          
          [Tasks]
          Name: "desktopicon"; Description: "Create a desktop shortcut"; GroupDescription: "Additional shortcuts:"; Flags: unchecked
          
          [Files]
          Source: "build\windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          
          [Icons]
          Name: "{group}\SwissKit"; Filename: "{app}\SwissKit.exe"
          Name: "{group}\Uninstall SwissKit"; Filename: "{uninstallexe}"
          Name: "{autodesktop}\SwissKit"; Filename: "{app}\SwissKit.exe"; Tasks: desktopicon
          
          [Run]
          Filename: "{app}\SwissKit.exe"; Description: "Launch SwissKit"; Flags: nowait postinstall skipifsilent
          "@
          
          New-Item -ItemType Directory -Path "installer" -Force
          $innoScript | Out-File -FilePath "swisskit.iss" -Encoding UTF8
          
          # 构建安装包
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "swisskit.iss"
          
          # 验证安装包
          $installerPath = "installer\SwissKit-Setup-$versionClean.exe"
          if (Test-Path $installerPath) {
            $installerSize = (Get-ItemProperty $installerPath).Length
            Write-Output "Installer created: $installerPath ($installerSize bytes)"
          } else {
            throw "Installer creation failed"
          }

      # 打包构建产物
      - name: Package builds
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $artifactName = "swisskit-windows-x64-$version"
          
          Write-Output "Creating portable package: $artifactName"
          
          # 创建便携版ZIP包
          New-Item -ItemType Directory -Path "release\$artifactName" -Force
          Copy-Item -Path "build\windows\*" -Destination "release\$artifactName" -Recurse
          
          # 添加说明文件
          $readmeContent = @"
          SwissKit Portable Version
          =========================
          
          This is the portable version of SwissKit.
          
          To run the application:
          1. Extract this ZIP file to any folder
          2. Run SwissKit.exe
          
          No installation required.
          
          Version: $version
          Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
          "@
          
          $readmeContent | Out-File -FilePath "release\$artifactName\README.txt" -Encoding UTF8
          
          # 创建ZIP包
          Compress-Archive -Path "release\$artifactName" -DestinationPath "build\$artifactName.zip" -Force
          
          Write-Output "Portable package created successfully"

      # 上传构建日志（用于调试）
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build.log
            *.log
          retention-days: 7

      # 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            build/*.zip
            installer/*.exe

  # 发布步骤
  release:
    needs: build-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: artifacts/

      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts/ -type f -exec ls -lh {} \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.test_version || github.ref_name }}
          name: SwissKit Release ${{ github.event.inputs.test_version || github.ref_name }}
          files: |
            artifacts/**/*
          body: |
            ## SwissKit Windows Release
            
            ### Downloads
            
            **🚀 Recommended - Installer:**
            - `SwissKit-Setup-*.exe` - Windows installer with automatic setup
            
            **📦 Portable Version:**
            - `swisskit-windows-x64-*.zip` - Extract and run, no installation needed
            
            ### System Requirements
            - Windows 10/11 (64-bit)
            - No additional dependencies required
            
            ### Installation
            
            **Installer:** Run the `.exe` file and follow the setup wizard.
            
            **Portable:** Extract the `.zip` file and run `SwissKit.exe`.
            
            ---
            *Built with Flet 0.27.0 for compatibility*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
