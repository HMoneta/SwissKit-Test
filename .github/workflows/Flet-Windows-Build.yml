name: Flet Windows Build - Final Fix

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test'
        required: true
        default: 'v0.1.0-test'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        shell: powershell
        run: |
          Write-Output "=== Installing dependencies ==="
          uv sync --all-extras

      # 关键步骤：在 Flet 构建开始后立即修复依赖
      - name: Build with dependency fix
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.test_version }}"
          } else {
            $VERSION = "${{ github.ref_name }}"
          }
          
          Write-Output "=== Starting Flet Build with Dependency Fix ==="
          Write-Output "Build version: $VERSION"
          
          # 设置环境变量
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          
          # 启动 Flet 构建但在后台监控和修复
          $buildJob = Start-Job -ScriptBlock {
            param($version)
            
            # 在后台启动 Flet 构建
            & uv run flet build windows --build-version $version --verbose --no-rich-output
          } -ArgumentList $VERSION
          
          # 等待 Flutter 下载和初始化完成
          Start-Sleep -Seconds 90
          
          # 修复依赖问题
          Write-Output "=== Fixing dependency versions ==="
          
          try {
            # 查找 pub cache 位置
            $pubCachePath = "$env:LOCALAPPDATA\Pub\Cache\hosted\pub.dev"
            
            if (Test-Path $pubCachePath) {
              Write-Output "Found pub cache at: $pubCachePath"
              
              # 查找并修复 webview_flutter_android 包
              $webviewDirs = Get-ChildItem "$pubCachePath" -Filter "webview_flutter_android-*" -Directory -ErrorAction SilentlyContinue
              
              foreach ($dir in $webviewDirs) {
                $pubspecPath = Join-Path $dir.FullName "pubspec.yaml"
                
                if (Test-Path $pubspecPath) {
                  Write-Output "Fixing $pubspecPath"
                  
                  # 读取并修改 pubspec.yaml
                  $content = Get-Content $pubspecPath -Raw -Encoding UTF8
                  
                  # 替换 Dart SDK 版本要求
                  $content = $content -replace 'sdk:\s*[''"]>=3\.9\.0[''"]', 'sdk: ">=3.7.0 <4.0.0"'
                  $content = $content -replace 'sdk:\s*[''"]>=3\.8\.0[''"]', 'sdk: ">=3.7.0 <4.0.0"'
                  $content = $content -replace 'sdk:\s*[''"].*>=3\.[89]\..*[''"]', 'sdk: ">=3.7.0 <4.0.0"'
                  
                  # 写回文件
                  $content | Set-Content $pubspecPath -Encoding UTF8 -NoNewline
                  
                  Write-Output "Successfully modified $($dir.Name)"
                }
              }
              
              # 同时修复其他可能有版本问题的包
              $packagesToFix = @("webview_flutter_wkwebview", "webview_flutter_platform_interface")
              
              foreach ($packageName in $packagesToFix) {
                $packageDirs = Get-ChildItem "$pubCachePath" -Filter "$packageName-*" -Directory -ErrorAction SilentlyContinue
                
                foreach ($dir in $packageDirs) {
                  $pubspecPath = Join-Path $dir.FullName "pubspec.yaml"
                  
                  if (Test-Path $pubspecPath) {
                    $content = Get-Content $pubspecPath -Raw -Encoding UTF8
                    $content = $content -replace 'sdk:\s*[''"]>=3\.[89]\..*[''"]', 'sdk: ">=3.7.0 <4.0.0"'
                    $content | Set-Content $pubspecPath -Encoding UTF8 -NoNewline
                    Write-Output "Fixed $($dir.Name)"
                  }
                }
              }
            }
          }
          catch {
            Write-Output "Dependency fix failed, but continuing: $_"
          }
          
          # 等待构建完成
          Write-Output "=== Waiting for build to complete ==="
          Wait-Job $buildJob -Timeout 1800  # 30 minutes timeout
          
          $result = Receive-Job $buildJob
          $exitCode = $buildJob.State
          
          Remove-Job $buildJob
          
          # 输出构建结果
          Write-Output $result
          
          if ($exitCode -ne "Completed") {
            throw "Build failed with state: $exitCode"
          }

      # 验证构建结果
      - name: Verify build output
        shell: powershell
        run: |
          Write-Output "=== Verifying build output ==="
          if (-not (Test-Path "build\windows")) {
            throw "Build output directory not found"
          }
          
          $exePath = "build\windows\SwissKit.exe"
          if (-not (Test-Path $exePath)) {
            Write-Output "Contents of build\windows:"
            Get-ChildItem "build\windows" -Recurse | Write-Output
            throw "SwissKit.exe not found in build output"
          }
          
          Write-Output "Build verification successful"

      # 安装 Inno Setup
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: powershell

      # 创建安装包
      - name: Create installer
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $versionClean = $version -replace '^v', ''
          
          $innoScript = @"
          [Setup]
          AppName=SwissKit
          AppVersion=$versionClean
          AppPublisher=Summer Group
          DefaultDirName={autopf}\SwissKit
          DefaultGroupName=SwissKit
          Compression=lzma2
          SolidCompression=yes
          OutputDir=installer
          OutputBaseFilename=SwissKit-Setup-$versionClean
          WizardStyle=modern
          PrivilegesRequired=admin
          
          [Files]
          Source: "build\windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          
          [Icons]
          Name: "{group}\SwissKit"; Filename: "{app}\SwissKit.exe"
          Name: "{autodesktop}\SwissKit"; Filename: "{app}\SwissKit.exe"
          
          [Run]
          Filename: "{app}\SwissKit.exe"; Description: "Launch SwissKit"; Flags: nowait postinstall skipifsilent
          "@
          
          New-Item -ItemType Directory -Path "installer" -Force
          $innoScript | Out-File -FilePath "swisskit.iss" -Encoding UTF8
          
          # 构建安装包
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "swisskit.iss"

      # 打包
      - name: Package builds
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $artifactName = "swisskit-windows-x64-$version"
          New-Item -ItemType Directory -Path "release\$artifactName" -Force
          Copy-Item -Path "build\windows\*" -Destination "release\$artifactName" -Recurse
          Compress-Archive -Path "release\$artifactName" -DestinationPath "build\$artifactName.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            build/*.zip
            installer/*.exe

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.test_version || github.ref_name }}
          name: SwissKit Release ${{ github.event.inputs.test_version || github.ref_name }}
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
