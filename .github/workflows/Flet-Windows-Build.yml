name: Flet Windows Build with Flutter Fix

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test'
        required: true
        default: 'v0.1.0-test'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      # 创建 pubspec_overrides.yaml 来解决依赖问题
      - name: Create pubspec overrides
        shell: powershell
        run: |
          Write-Output "=== Creating pubspec_overrides.yaml ==="
          $overrideContent = @"
          # pubspec_overrides.yaml
          # 解决 webview_flutter_android 版本兼容性问题
          
          dependency_overrides:
            # 降级到兼容 Dart 3.7 的版本
            webview_flutter_android: 3.16.0
            webview_flutter_platform_interface: 2.10.0
            webview_flutter_wkwebview: 3.13.0
            
            # 确保其他相关包也兼容
            flutter_lints: 3.0.0
            meta: 1.11.0
          "@
          
          $overrideContent | Out-File -FilePath "pubspec_overrides.yaml" -Encoding UTF8
          Write-Output "Created pubspec_overrides.yaml"

      # 完全清理环境
      - name: Clean build environment
        shell: powershell
        run: |
          Write-Output "=== Cleaning build environment ==="
          
          # 清理可能存在的 Flutter 相关缓存
          $foldersToClean = @(
            "$env:USERPROFILE\flutter",
            "$env:USERPROFILE\.flutter",
            "$env:LOCALAPPDATA\Pub\Cache",
            "$env:APPDATA\Pub\Cache",
            "$env:TEMP\flet*",
            "build",
            ".dart_tool"
          )
          
          foreach ($folder in $foldersToClean) {
            if (Test-Path $folder) {
              Write-Output "Removing: $folder"
              Remove-Item -Recurse -Force $folder -ErrorAction SilentlyContinue
            }
          }

      # 设置环境变量
      - name: Set build environment
        shell: powershell
        run: |
          # 设置编码
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          
          # 设置 Flet 相关环境变量
          $env:FLET_FORCE_DOWNLOAD_FLUTTER = "true"
          $env:FLET_FLUTTER_BUILD_ARGS = "--dart-define=WEBVIEW_FLUTTER_ANDROID_ENABLED=false"
          
          # 输出到 GitHub 环境
          echo "PYTHONIOENCODING=utf-8" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PYTHONUTF8=1" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "FLET_FORCE_DOWNLOAD_FLUTTER=true" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install dependencies
        shell: powershell
        run: |
          Write-Output "=== Installing dependencies ==="
          uv sync --all-extras

      # 预处理 Flutter 环境
      - name: Pre-process Flutter environment
        shell: powershell
        run: |
          Write-Output "=== Pre-processing Flutter environment ==="
          
          # 让 Flet 先下载和设置 Flutter
          uv run python -c "import flet; print('Flet imported successfully')"
          
          # 等待一会儿让 Flutter 完全初始化
          Start-Sleep -Seconds 5
          
          # 尝试定位 Flutter 路径
          $fletPackagePath = uv run python -c "import flet; import os; print(os.path.dirname(flet.__file__))" 2>$null
          Write-Output "Flet package path: $fletPackagePath"
          
          # 查找可能的 Flutter 路径
          $possibleFlutterPaths = @(
            "$env:USERPROFILE\.flet\flutter",
            "$env:LOCALAPPDATA\.flet\flutter",
            "$env:APPDATA\.flet\flutter"
          )
          
          foreach ($path in $possibleFlutterPaths) {
            if (Test-Path "$path\bin\flutter.bat") {
              Write-Output "Found Flutter at: $path"
              $env:FLUTTER_ROOT = $path
              $env:PATH = "$path\bin;$env:PATH"
              echo "FLUTTER_ROOT=$path" | Out-File -FilePath $env:GITHUB_ENV -Append
              echo "PATH=$path\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
              break
            }
          }

      # 修复 Flutter 依赖
      - name: Fix Flutter dependencies
        shell: powershell
        run: |
          Write-Output "=== Attempting to fix Flutter dependencies ==="
          
          try {
            # 尝试直接修改 pub cache 中的问题包
            $pubCachePath = "$env:LOCALAPPDATA\Pub\Cache\hosted\pub.dev"
            
            if (Test-Path $pubCachePath) {
              Write-Output "Pub cache path: $pubCachePath"
              
              # 查找 webview_flutter_android 包
              $webviewPackages = Get-ChildItem "$pubCachePath" -Filter "webview_flutter_android-*" -Directory -ErrorAction SilentlyContinue
              
              foreach ($pkg in $webviewPackages) {
                Write-Output "Found package: $($pkg.Name)"
                
                # 尝试修改 pubspec.yaml 中的 Dart 版本要求
                $pubspecPath = Join-Path $pkg.FullName "pubspec.yaml"
                if (Test-Path $pubspecPath) {
                  Write-Output "Modifying $pubspecPath"
                  $content = Get-Content $pubspecPath -Raw
                  $content = $content -replace 'sdk:\s*[''"]>=3\.9\.0[''"]', 'sdk: ">=3.7.0 <4.0.0"'
                  $content = $content -replace 'sdk:\s*[''"]>=3\.8\.0[''"]', 'sdk: ">=3.7.0 <4.0.0"'
                  $content | Set-Content $pubspecPath -Encoding UTF8
                  Write-Output "Modified pubspec.yaml in $($pkg.Name)"
                }
              }
            }
          }
          catch {
            Write-Output "Failed to modify pub cache: $_"
            Write-Output "Continuing with build..."
          }

      # 构建应用
      - name: Build with flet
        shell: powershell
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.test_version }}"
          } else {
            $VERSION = "${{ github.ref_name }}"
          }
          
          Write-Output "=== Starting Flet Build ==="
          Write-Output "Build version: $VERSION"
          
          # 设置更详细的日志
          $env:FLUTTER_VERBOSE = "true"
          $env:FLET_DEBUG = "true"
          
          try {
            # 使用更保守的构建参数，并排除 Android 相关构建
            uv run flet build windows `
              --build-version $VERSION `
              --verbose `
              --build-number 1 `
              --no-rich-output `
              --flutter-build-args="--dart-define=EXCLUDE_ANDROID_DEPS=true" `
              2>&1 | Tee-Object -FilePath "build.log"
          }
          catch {
            Write-Output "=== Build failed, showing logs ==="
            if (Test-Path "build.log") {
              Get-Content "build.log" | Write-Output
            }
            
            # 尝试另一种构建方法
            Write-Output "=== Trying alternative build method ==="
            try {
              uv run flet build windows `
                --build-version $VERSION `
                --verbose `
                --no-rich-output `
                --flutter-build-args="--no-tree-shake-icons" `
                2>&1 | Tee-Object -FilePath "build2.log"
            }
            catch {
              Write-Output "=== Alternative build also failed ==="
              if (Test-Path "build2.log") {
                Get-Content "build2.log" | Write-Output
              }
              throw "All build attempts failed"
            }
          }

      # 验证构建结果
      - name: Verify build output
        shell: powershell
        run: |
          Write-Output "=== Verifying build output ==="
          if (-not (Test-Path "build\windows")) {
            throw "Build output directory not found"
          }
          
          $exePath = "build\windows\SwissKit.exe"
          if (-not (Test-Path $exePath)) {
            Write-Output "Contents of build\windows:"
            Get-ChildItem "build\windows" -Recurse | Write-Output
            throw "SwissKit.exe not found in build output"
          }
          
          Write-Output "Build verification successful"

      # 其余步骤保持不变...
      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: powershell

      - name: Create Inno Setup script
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $versionClean = $version -replace '^v', ''
          
          $innoScript = @"
          [Setup]
          AppName=SwissKit
          AppVersion=$versionClean
          AppPublisher=Summer Group
          DefaultDirName={autopf}\SwissKit
          DefaultGroupName=SwissKit
          UninstallDisplayName=SwissKit
          Compression=lzma2
          SolidCompression=yes
          OutputDir=installer
          OutputBaseFilename=SwissKit-Setup-$versionClean
          WizardStyle=modern
          PrivilegesRequired=admin
          
          [Files]
          Source: "build\windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          
          [Icons]
          Name: "{group}\SwissKit"; Filename: "{app}\SwissKit.exe"
          Name: "{autodesktop}\SwissKit"; Filename: "{app}\SwissKit.exe"
          
          [Run]
          Filename: "{app}\SwissKit.exe"; Description: "Launch SwissKit"; Flags: nowait postinstall skipifsilent
          "@
          
          New-Item -ItemType Directory -Path "installer" -Force
          $innoScript | Out-File -FilePath "swisskit.iss" -Encoding UTF8

      - name: Build installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "swisskit.iss"
        shell: powershell

      - name: Package builds
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $artifactName = "swisskit-windows-x64-$version"
          New-Item -ItemType Directory -Path "release\$artifactName" -Force
          Copy-Item -Path "build\windows\*" -Destination "release\$artifactName" -Recurse
          Compress-Archive -Path "release\$artifactName" -DestinationPath "build\$artifactName.zip"

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            *.log
            pubspec_overrides.yaml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            build/*.zip
            installer/*.exe

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.test_version || github.ref_name }}
          name: SwissKit Release ${{ github.event.inputs.test_version || github.ref_name }}
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
